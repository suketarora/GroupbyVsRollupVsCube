{"paragraphs":[{"text":"%md\n### `Multi-dimensional aggregate operators` are enhanced variants of groupBy operator that allow you to create queries for subtotals, grand totals and superset of subtotals in one go.","user":"anonymous","dateUpdated":"2019-02-06T11:05:33+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3><code>Multi-dimensional aggregate operators</code> are enhanced variants of groupBy operator that allow you to create queries for subtotals, grand totals and superset of subtotals in one go.</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1549431275819_717554684","id":"20190206-110435_133369938","dateCreated":"2019-02-06T11:04:35+0530","dateStarted":"2019-02-06T11:05:33+0530","dateFinished":"2019-02-06T11:05:33+0530","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:590"},{"text":"val sales = Seq(\n  (\"Warsaw\", 2016, 100),\n  (\"Warsaw\", 2017, 200),\n  (\"Boston\", 2015, 50),\n  (\"Boston\", 2016, 150),\n  (\"Toronto\", 2017, 50)\n).toDF(\"city\", \"year\", \"amount\")\n","user":"anonymous","dateUpdated":"2019-02-06T11:25:03+0530","config":{"colWidth":12,"fontSize":13,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"sales: org.apache.spark.sql.DataFrame = [city: string, year: int ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1549431300808_-1188628188","id":"20190206-110500_1414963165","dateCreated":"2019-02-06T11:05:00+0530","dateStarted":"2019-02-06T11:05:53+0530","dateFinished":"2019-02-06T11:06:09+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:591"},{"text":"%md\n\n### `GroupBy` very labor-intense","user":"anonymous","dateUpdated":"2019-02-06T11:21:59+0530","config":{"colWidth":6,"fontSize":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false}}},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3><code>GroupBy</code> very labor-intense</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1549431353173_1864462053","id":"20190206-110553_235325546","dateCreated":"2019-02-06T11:05:53+0530","dateStarted":"2019-02-06T11:21:48+0530","dateFinished":"2019-02-06T11:21:48+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:592"},{"text":"%md\n### Multi-dimensional aggregate operators are semantically equivalent to union operator (or SQL’s UNION ALL) to combine single grouping queries.","user":"anonymous","dateUpdated":"2019-02-06T11:10:08+0530","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Multi-dimensional aggregate operators are semantically equivalent to union operator (or SQL’s UNION ALL) to combine single grouping queries.</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1549431433785_1742731083","id":"20190206-110713_1828875061","dateCreated":"2019-02-06T11:07:13+0530","dateStarted":"2019-02-06T11:10:08+0530","dateFinished":"2019-02-06T11:10:08+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:593"},{"text":"val groupByCityAndYear = (sales\n  .groupBy(\"city\", \"year\")  // <-- subtotals (city, year)\n  .agg(sum(\"amount\") as \"amount\"))\nval groupByCityOnly = (sales\n  .groupBy(\"city\")          // <-- subtotals (city)\n  .agg(sum(\"amount\") as \"amount\")\n  .select($\"city\", lit(null) as \"year\", $\"amount\"))  // <-- year is null\nval withUnion = (groupByCityAndYear\n  .union(groupByCityOnly)\n  .sort($\"city\".desc_nulls_last, $\"year\".asc_nulls_last))","user":"anonymous","dateUpdated":"2019-02-06T11:25:14+0530","config":{"colWidth":6,"fontSize":13,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":87,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"groupByCityAndYear: org.apache.spark.sql.DataFrame = [city: string, year: int ... 1 more field]\ngroupByCityOnly: org.apache.spark.sql.DataFrame = [city: string, year: null ... 1 more field]\nwithUnion: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [city: string, year: int ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1549431459264_-1054042023","id":"20190206-110739_1592734853","dateCreated":"2019-02-06T11:07:39+0530","dateStarted":"2019-02-06T11:11:49+0530","dateFinished":"2019-02-06T11:11:51+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:594"},{"text":"// Roll up your sleeves!\nval withRollup = (sales\n  .rollup(\"city\", \"year\")\n  .agg(sum(\"amount\") as \"amount\", grouping_id() as \"gid\")\n  .sort($\"city\".desc_nulls_last, $\"year\".asc_nulls_last)\n  .filter($\"gid\" =!= 3)\n  .select(\"city\", \"year\", \"amount\"))","user":"anonymous","dateUpdated":"2019-02-06T11:24:50+0530","config":{"colWidth":6,"fontSize":16,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":113,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"withRollup: org.apache.spark.sql.DataFrame = [city: string, year: int ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1549431451184_-542252788","id":"20190206-110731_2085787401","dateCreated":"2019-02-06T11:07:31+0530","dateStarted":"2019-02-06T11:24:38+0530","dateFinished":"2019-02-06T11:24:39+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:595"},{"text":"withUnion.show","user":"anonymous","dateUpdated":"2019-02-06T11:27:25+0530","config":{"colWidth":7,"fontSize":15,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+----+------+\n|   city|year|amount|\n+-------+----+------+\n| Warsaw|2016|   100|\n| Warsaw|2017|   200|\n| Warsaw|null|   300|\n|Toronto|2017|    50|\n|Toronto|null|    50|\n| Boston|2015|    50|\n| Boston|2016|   150|\n| Boston|null|   200|\n+-------+----+------+\n\n"}]},"apps":[],"jobName":"paragraph_1549431679906_-1334750517","id":"20190206-111119_1014715480","dateCreated":"2019-02-06T11:11:19+0530","dateStarted":"2019-02-06T11:23:36+0530","dateFinished":"2019-02-06T11:23:44+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:596"},{"text":"withRollup.show","user":"anonymous","dateUpdated":"2019-02-06T11:27:35+0530","config":{"colWidth":5,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+----+------+\n|   city|year|amount|\n+-------+----+------+\n| Warsaw|2016|   100|\n| Warsaw|2017|   200|\n| Warsaw|null|   300|\n|Toronto|2017|    50|\n|Toronto|null|    50|\n| Boston|2015|    50|\n| Boston|2016|   150|\n| Boston|null|   200|\n+-------+----+------+\n\n"}]},"apps":[],"jobName":"paragraph_1549432416599_1074391250","id":"20190206-112336_990280293","dateCreated":"2019-02-06T11:23:36+0530","dateStarted":"2019-02-06T11:26:58+0530","dateFinished":"2019-02-06T11:27:00+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:597"},{"text":"val withRollup_without_3_filter = (sales\n  .rollup(\"city\", \"year\")\n  .agg(sum(\"amount\") as \"amount\", grouping_id() as \"gid\")\n  .sort($\"city\".desc_nulls_last, $\"year\".asc_nulls_last)\n  )","user":"anonymous","dateUpdated":"2019-02-06T12:08:17+0530","config":{"colWidth":12,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"withRollup_without_3_filter: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [city: string, year: int ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1549432618463_2105518162","id":"20190206-112658_784984929","dateCreated":"2019-02-06T11:26:58+0530","dateStarted":"2019-02-06T11:29:18+0530","dateFinished":"2019-02-06T11:29:19+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:598"},{"text":"withRollup_without_3_filter.show","user":"anonymous","dateUpdated":"2019-02-06T12:08:22+0530","config":{"colWidth":12,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+----+------+---+\n|   city|year|amount|gid|\n+-------+----+------+---+\n| Warsaw|2016|   100|  0|\n| Warsaw|2017|   200|  0|\n| Warsaw|null|   300|  1|\n|Toronto|2017|    50|  0|\n|Toronto|null|    50|  1|\n| Boston|2015|    50|  0|\n| Boston|2016|   150|  0|\n| Boston|null|   200|  1|\n|   null|null|   550|  3|\n+-------+----+------+---+\n\n"}]},"apps":[],"jobName":"paragraph_1549432735900_-139717198","id":"20190206-112855_1047542141","dateCreated":"2019-02-06T11:28:55+0530","dateStarted":"2019-02-06T11:29:27+0530","dateFinished":"2019-02-06T11:29:29+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:599"},{"text":"// SQL only, alas.\nsales.createOrReplaceTempView(\"sales\")\nval withGroupingSets = sql(\"\"\"\n  SELECT city, year, SUM(amount) as amount\n  FROM sales\n  GROUP BY city, year\n  GROUPING SETS ((city, year), (city))\n  ORDER BY city DESC NULLS LAST, year ASC NULLS LAST\n  \"\"\")","user":"anonymous","dateUpdated":"2019-02-06T12:08:28+0530","config":{"colWidth":6,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"withGroupingSets: org.apache.spark.sql.DataFrame = [city: string, year: int ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1549432767127_-214774222","id":"20190206-112927_1397796375","dateCreated":"2019-02-06T11:29:27+0530","dateStarted":"2019-02-06T11:48:09+0530","dateFinished":"2019-02-06T11:48:10+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:600"},{"text":"withGroupingSets.show","user":"anonymous","dateUpdated":"2019-02-06T12:08:33+0530","config":{"colWidth":6,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+----+------+\n|   city|year|amount|\n+-------+----+------+\n| Warsaw|2016|   100|\n| Warsaw|2017|   200|\n| Warsaw|null|   300|\n|Toronto|2017|    50|\n|Toronto|null|    50|\n| Boston|2015|    50|\n| Boston|2016|   150|\n| Boston|null|   200|\n+-------+----+------+\n\n"}]},"apps":[],"jobName":"paragraph_1549433889531_-1154307670","id":"20190206-114809_1122976238","dateCreated":"2019-02-06T11:48:09+0530","dateStarted":"2019-02-06T11:48:27+0530","dateFinished":"2019-02-06T11:48:29+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:601"},{"text":"%md\n### It is assumed that using one of the operators is usually more efficient (than union and groupBy) as it gives more freedom for query optimization.","user":"anonymous","dateUpdated":"2019-02-06T11:49:02+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>It is assumed that using one of the operators is usually more efficient (than union and groupBy) as it gives more freedom for query optimization.</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1549433907666_1916351835","id":"20190206-114827_2115787097","dateCreated":"2019-02-06T11:48:27+0530","dateStarted":"2019-02-06T11:49:02+0530","dateFinished":"2019-02-06T11:49:02+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:602"},{"text":"%angular\n\n<table >\n<caption class=\"title\">Table 1. Multi-dimensional Aggregate Operators</caption>\n<colgroup>\n<col style=\"width: 25%;\">\n<col style=\"width: 25%;\">\n<col style=\"width: 50%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Operator</th>\n<th class=\"tableblock halign-left valign-top\">Return Type</th>\n<th class=\"tableblock halign-left valign-top\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><a >cube</a></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><a >RelationalGroupedDataset</a></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Calculates subtotals and a grand total for every permutation of the columns specified.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><a>rollup</a></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><a>RelationalGroupedDataset</a></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Calculates subtotals and a grand total over (ordered) combination of groups.</p></td>\n</tr>\n</tbody>\n</table>\n\n","user":"anonymous","dateUpdated":"2019-02-06T11:54:05+0530","config":{"colWidth":12,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/undefined","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<table >\n<caption class=\"title\">Table 1. Multi-dimensional Aggregate Operators</caption>\n<colgroup>\n<col style=\"width: 25%;\">\n<col style=\"width: 25%;\">\n<col style=\"width: 50%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Operator</th>\n<th class=\"tableblock halign-left valign-top\">Return Type</th>\n<th class=\"tableblock halign-left valign-top\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><a >cube</a></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><a >RelationalGroupedDataset</a></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Calculates subtotals and a grand total for every permutation of the columns specified.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><a>rollup</a></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><a>RelationalGroupedDataset</a></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Calculates subtotals and a grand total over (ordered) combination of groups.</p></td>\n</tr>\n</tbody>\n</table>"}]},"apps":[],"jobName":"paragraph_1549433942539_846110036","id":"20190206-114902_1733920144","dateCreated":"2019-02-06T11:49:02+0530","dateStarted":"2019-02-06T11:54:05+0530","dateFinished":"2019-02-06T11:54:05+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:603"},{"text":"%md\n\n### `cube` Operator\n\ncube(cols: Column*): RelationalGroupedDataset\ncube(col1: String, cols: String*): RelationalGroupedDataset","user":"anonymous","dateUpdated":"2019-02-06T12:00:42+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3><code>cube</code> Operator</h3>\n<p>cube(cols: Column*): RelationalGroupedDataset<br/>cube(col1: String, cols: String*): RelationalGroupedDataset</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1549434007501_2134749352","id":"20190206-115007_136633919","dateCreated":"2019-02-06T11:50:07+0530","dateStarted":"2019-02-06T12:00:42+0530","dateFinished":"2019-02-06T12:00:43+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:604"},{"text":"%md\ncube multi-dimensional aggregate operator is an extension of groupBy operator that allows calculating subtotals and a grand total across all combinations of specified group of n + 1 dimensions (with n being the number of columns as cols and col1 and 1 for where values become null, i.e. undefined).\n\ncube returns RelationalGroupedDataset that you can use to execute aggregate function or operator.","user":"anonymous","dateUpdated":"2019-02-06T12:01:15+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>cube multi-dimensional aggregate operator is an extension of groupBy operator that allows calculating subtotals and a grand total across all combinations of specified group of n + 1 dimensions (with n being the number of columns as cols and col1 and 1 for where values become null, i.e. undefined).</p>\n<p>cube returns RelationalGroupedDataset that you can use to execute aggregate function or operator.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1549434621020_-1423249569","id":"20190206-120021_1653827010","dateCreated":"2019-02-06T12:00:21+0530","dateStarted":"2019-02-06T12:01:15+0530","dateFinished":"2019-02-06T12:01:15+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:605"},{"text":"val q = (sales.cube(\"city\", \"year\")\n  .agg(sum(\"amount\") as \"amount\")\n  .sort($\"city\".desc_nulls_last, $\"year\".asc_nulls_last))","user":"anonymous","dateUpdated":"2019-02-06T12:10:05+0530","config":{"colWidth":6,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"q: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [city: string, year: int ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1549434675257_-64357256","id":"20190206-120115_149556941","dateCreated":"2019-02-06T12:01:15+0530","dateStarted":"2019-02-06T12:03:56+0530","dateFinished":"2019-02-06T12:03:57+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:606"},{"text":"// equivalent to cube(\"city\", \"year\")\n// note the additional (year) grouping set\nval q_from_sql = sql(\"\"\"\n  SELECT city, year, sum(amount) as amount\n  FROM sales\n  GROUP BY city, year\n  GROUPING SETS ((city, year), (city), (year), ())\n  ORDER BY city DESC NULLS LAST, year ASC NULLS LAST\n  \"\"\")","user":"anonymous","dateUpdated":"2019-02-06T12:10:18+0530","config":{"colWidth":6,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"q_from_sql: org.apache.spark.sql.DataFrame = [city: string, year: int ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1549434903412_1575233371","id":"20190206-120503_837671322","dateCreated":"2019-02-06T12:05:03+0530","dateStarted":"2019-02-06T12:07:40+0530","dateFinished":"2019-02-06T12:07:40+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:607"},{"text":"q.show","user":"anonymous","dateUpdated":"2019-02-06T12:10:12+0530","config":{"colWidth":6,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+----+------+\n|   city|year|amount|\n+-------+----+------+\n| Warsaw|2016|   100|\n| Warsaw|2017|   200|\n| Warsaw|null|   300|\n|Toronto|2017|    50|\n|Toronto|null|    50|\n| Boston|2015|    50|\n| Boston|2016|   150|\n| Boston|null|   200|\n|   null|2015|    50|\n|   null|2016|   250|\n|   null|2017|   250|\n|   null|null|   550|\n+-------+----+------+\n\n"}]},"apps":[],"jobName":"paragraph_1549434825252_564008246","id":"20190206-120345_1921404838","dateCreated":"2019-02-06T12:03:45+0530","dateStarted":"2019-02-06T12:05:03+0530","dateFinished":"2019-02-06T12:05:04+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:608"},{"text":"q_from_sql.show","user":"anonymous","dateUpdated":"2019-02-06T12:10:37+0530","config":{"colWidth":6,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+----+------+\n|   city|year|amount|\n+-------+----+------+\n| Warsaw|2016|   100|\n| Warsaw|2017|   200|\n| Warsaw|null|   300|\n|Toronto|2017|    50|\n|Toronto|null|    50|\n| Boston|2015|    50|\n| Boston|2016|   150|\n| Boston|null|   200|\n|   null|2015|    50|\n|   null|2016|   250|\n|   null|2017|   250|\n|   null|null|   550|\n+-------+----+------+\n\n"}]},"apps":[],"jobName":"paragraph_1549435060296_1200427181","id":"20190206-120740_1287629185","dateCreated":"2019-02-06T12:07:40+0530","dateStarted":"2019-02-06T12:09:22+0530","dateFinished":"2019-02-06T12:09:23+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:609"},{"text":"val q_with_groupId = (sales.cube(\"city\", \"year\")\n  .agg(sum(\"amount\") as \"amount\", grouping_id() as \"gid\")\n  .sort($\"city\".desc_nulls_last, $\"year\".asc_nulls_last))","user":"anonymous","dateUpdated":"2019-02-06T12:40:32+0530","config":{"colWidth":12,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"q_with_groupId: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [city: string, year: int ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1549435162492_1705767502","id":"20190206-120922_1926423784","dateCreated":"2019-02-06T12:09:22+0530","dateStarted":"2019-02-06T12:39:29+0530","dateFinished":"2019-02-06T12:39:29+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:610"},{"text":"q_with_groupId.show","user":"anonymous","dateUpdated":"2019-02-06T12:40:24+0530","config":{"colWidth":6,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+----+------+---+\n|   city|year|amount|gid|\n+-------+----+------+---+\n| Warsaw|2016|   100|  0|\n| Warsaw|2017|   200|  0|\n| Warsaw|null|   300|  1|\n|Toronto|2017|    50|  0|\n|Toronto|null|    50|  1|\n| Boston|2015|    50|  0|\n| Boston|2016|   150|  0|\n| Boston|null|   200|  1|\n|   null|2015|    50|  2|\n|   null|2016|   250|  2|\n|   null|2017|   250|  2|\n|   null|null|   550|  3|\n+-------+----+------+---+\n\n"}]},"apps":[],"jobName":"paragraph_1549436969332_-1619694970","id":"20190206-123929_1415674341","dateCreated":"2019-02-06T12:39:29+0530","dateStarted":"2019-02-06T12:39:45+0530","dateFinished":"2019-02-06T12:39:46+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:611"},{"text":"withRollup_without_3_filter.show","user":"anonymous","dateUpdated":"2019-02-06T13:25:50+0530","config":{"colWidth":6,"fontSize":14,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+----+------+---+\n|   city|year|amount|gid|\n+-------+----+------+---+\n| Warsaw|2016|   100|  0|\n| Warsaw|2017|   200|  0|\n| Warsaw|null|   300|  1|\n|Toronto|2017|    50|  0|\n|Toronto|null|    50|  1|\n| Boston|2015|    50|  0|\n| Boston|2016|   150|  0|\n| Boston|null|   200|  1|\n|   null|null|   550|  3|\n+-------+----+------+---+\n\n"}]},"apps":[],"jobName":"paragraph_1549436985468_-1598986503","id":"20190206-123945_1838239617","dateCreated":"2019-02-06T12:39:45+0530","dateStarted":"2019-02-06T13:25:36+0530","dateFinished":"2019-02-06T13:25:37+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:612"},{"text":"case class SalesSummary(date: String, product: String, country: String, revenue: Double)\nval sales = List(SalesSummary(\"01/01/2015\", \"iPhone\", \"USA\", 40000),\nSalesSummary(\"01/02/2015\", \"iPhone\", \"USA\", 30000),\nSalesSummary(\"01/01/2015\", \"iPhone\", \"China\", 10000),\nSalesSummary(\"01/02/2015\", \"iPhone\", \"China\", 5000),\nSalesSummary(\"01/01/2015\", \"S6\", \"USA\", 20000),\nSalesSummary(\"01/02/2015\", \"S6\", \"USA\", 10000),\nSalesSummary(\"01/01/2015\", \"S6\", \"China\", 9000),\nSalesSummary(\"01/02/2015\", \"S6\", \"China\", 6000))","user":"anonymous","dateUpdated":"2019-04-25T15:25:16+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class SalesSummary\nsales: List[SalesSummary] = List(SalesSummary(01/01/2015,iPhone,USA,40000.0), SalesSummary(01/02/2015,iPhone,USA,30000.0), SalesSummary(01/01/2015,iPhone,China,10000.0), SalesSummary(01/02/2015,iPhone,China,5000.0), SalesSummary(01/01/2015,S6,USA,20000.0), SalesSummary(01/02/2015,S6,USA,10000.0), SalesSummary(01/01/2015,S6,China,9000.0), SalesSummary(01/02/2015,S6,China,6000.0))\n"}]},"apps":[],"jobName":"paragraph_1549439736487_-1452737448","id":"20190206-132536_557403554","dateCreated":"2019-02-06T13:25:36+0530","dateStarted":"2019-04-25T15:25:16+0530","dateFinished":"2019-04-25T15:25:35+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:613"},{"text":"val salesDF = sc.parallelize(sales).toDF()\nval salesCubeDF = salesDF.cube($\"date\", $\"product\", $\"country\").sum(\"revenue\")\nsalesCubeDF.withColumnRenamed(\"sum(revenue)\", \"total\").show(30)","user":"anonymous","dateUpdated":"2019-04-25T15:26:59+0530","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"salesDF: org.apache.spark.sql.DataFrame = [date: string, product: string ... 2 more fields]\nsalesCubeDF: org.apache.spark.sql.DataFrame = [date: string, product: string ... 2 more fields]\n+----------+-------+-------+--------+\n|      date|product|country|   total|\n+----------+-------+-------+--------+\n|01/01/2015|   null|    USA| 60000.0|\n|      null|   null|    USA|100000.0|\n|      null| iPhone|   null| 85000.0|\n|01/02/2015|   null|    USA| 40000.0|\n|01/02/2015| iPhone|    USA| 30000.0|\n|      null|     S6|   null| 45000.0|\n|01/02/2015|     S6|   null| 16000.0|\n|01/02/2015|     S6|  China|  6000.0|\n|01/01/2015|   null|   null| 79000.0|\n|01/02/2015| iPhone|  China|  5000.0|\n|      null|     S6|  China| 15000.0|\n|      null|   null|   null|130000.0|\n|      null| iPhone|  China| 15000.0|\n|01/01/2015| iPhone|    USA| 40000.0|\n|01/02/2015|     S6|    USA| 10000.0|\n|01/01/2015|     S6|   null| 29000.0|\n|01/02/2015|   null|   null| 51000.0|\n|      null|   null|  China| 30000.0|\n|01/01/2015|     S6|  China|  9000.0|\n|01/02/2015| iPhone|   null| 35000.0|\n|01/01/2015| iPhone|  China| 10000.0|\n|01/02/2015|   null|  China| 11000.0|\n|01/01/2015|     S6|    USA| 20000.0|\n|01/01/2015|   null|  China| 19000.0|\n|01/01/2015| iPhone|   null| 50000.0|\n|      null|     S6|    USA| 30000.0|\n|      null| iPhone|    USA| 70000.0|\n+----------+-------+-------+--------+\n\n"}]},"apps":[],"jobName":"paragraph_1556186116331_-1935282816","id":"20190425-152516_1815438699","dateCreated":"2019-04-25T15:25:16+0530","dateStarted":"2019-04-25T15:25:50+0530","dateFinished":"2019-04-25T15:25:58+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:614"},{"text":"val salesDF = sc.parallelize(sales).toDF()\nval salesRollupDF = salesDF.rollup($\"date\", $\"product\", $\"country\").sum(\"revenue\")\nsalesRollupDF.withColumnRenamed(\"sum(revenue)\", \"total\").show(30)","user":"anonymous","dateUpdated":"2019-04-25T15:28:15+0530","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"salesDF: org.apache.spark.sql.DataFrame = [date: string, product: string ... 2 more fields]\nsalesRollupDF: org.apache.spark.sql.DataFrame = [date: string, product: string ... 2 more fields]\n+----------+-------+-------+--------+\n|      date|product|country|   total|\n+----------+-------+-------+--------+\n|01/02/2015| iPhone|    USA| 30000.0|\n|01/02/2015|     S6|   null| 16000.0|\n|01/02/2015|     S6|  China|  6000.0|\n|01/01/2015|   null|   null| 79000.0|\n|01/02/2015| iPhone|  China|  5000.0|\n|      null|   null|   null|130000.0|\n|01/01/2015| iPhone|    USA| 40000.0|\n|01/02/2015|     S6|    USA| 10000.0|\n|01/01/2015|     S6|   null| 29000.0|\n|01/02/2015|   null|   null| 51000.0|\n|01/01/2015|     S6|  China|  9000.0|\n|01/02/2015| iPhone|   null| 35000.0|\n|01/01/2015| iPhone|  China| 10000.0|\n|01/01/2015|     S6|    USA| 20000.0|\n|01/01/2015| iPhone|   null| 50000.0|\n+----------+-------+-------+--------+\n\n"}]},"apps":[],"jobName":"paragraph_1556186150805_1672843103","id":"20190425-152550_1951491148","dateCreated":"2019-04-25T15:25:50+0530","dateStarted":"2019-04-25T15:28:15+0530","dateFinished":"2019-04-25T15:28:17+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:615"},{"text":"println(salesCubeDF.count)\nprintln(salesRollupDF.count)","user":"anonymous","dateUpdated":"2019-04-25T15:29:28+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"27\n15\n"}]},"apps":[],"jobName":"paragraph_1556186295585_-1291206534","id":"20190425-152815_573528752","dateCreated":"2019-04-25T15:28:15+0530","dateStarted":"2019-04-25T15:29:28+0530","dateFinished":"2019-04-25T15:29:30+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:616"},{"title":"If you wanted to find the total sales of all products in the USA, you can use the following expression.","text":"salesCubeDF.filter(\"product IS null AND date IS null AND country='USA'\").show","user":"anonymous","dateUpdated":"2019-04-25T15:31:15+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+-------+-------+------------+\n|date|product|country|sum(revenue)|\n+----+-------+-------+------------+\n|null|   null|    USA|    100000.0|\n+----+-------+-------+------------+\n\n"}]},"apps":[],"jobName":"paragraph_1556186358366_585691006","id":"20190425-152918_631157514","dateCreated":"2019-04-25T15:29:18+0530","dateStarted":"2019-04-25T15:30:27+0530","dateFinished":"2019-04-25T15:30:28+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:617"},{"title":"If you wanted to know the subtotal of sales by product in the USA, you can use the following expression.","text":"salesCubeDF.filter(\"date IS null AND product IS NOT null AND country='USA'\").show","user":"anonymous","dateUpdated":"2019-04-25T15:31:38+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+-------+-------+------------+\n|date|product|country|sum(revenue)|\n+----+-------+-------+------------+\n|null|     S6|    USA|     30000.0|\n|null| iPhone|    USA|     70000.0|\n+----+-------+-------+------------+\n\n"}]},"apps":[],"jobName":"paragraph_1556186427144_-874851982","id":"20190425-153027_1636730686","dateCreated":"2019-04-25T15:30:27+0530","dateStarted":"2019-04-25T15:31:38+0530","dateFinished":"2019-04-25T15:31:39+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:618"},{"text":"%md\n\n# explode\n\nThe explode method generates zero or more rows from a column using a user-provided function. It takes\nthree arguments. The first argument is the input column, the second argument is the output column and the\nthird argument is a user provided function that generates one or more values for the output column for each\nvalue in the input column.\nFor example, consider a dataset that has a text column containing contents of an email. Let’s assume\nthat you want to split the email content into individual words and you want a row for each word in an email.","user":"anonymous","dateUpdated":"2019-04-25T16:03:25+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>explode</h1>\n<p>The explode method generates zero or more rows from a column using a user-provided function. It takes<br/>three arguments. The first argument is the input column, the second argument is the output column and the<br/>third argument is a user provided function that generates one or more values for the output column for each<br/>value in the input column.<br/>For example, consider a dataset that has a text column containing contents of an email. Let’s assume<br/>that you want to split the email content into individual words and you want a row for each word in an email.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1556186498503_-929842106","id":"20190425-153138_1339224303","dateCreated":"2019-04-25T15:31:38+0530","dateStarted":"2019-04-25T16:03:25+0530","dateFinished":"2019-04-25T16:03:28+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:619"},{"text":"case class Email(sender: String, recepient: String, subject: String, body: String)\nval emails = List(Email(\"James\", \"Mary\", \"back\", \"just got back from vacation\"),\nEmail(\"John\", \"Jessica\", \"money\", \"make million dollars\"),\nEmail(\"Tim\", \"Kevin\", \"report\", \"send me sales report ASAP\"))\nval emailDF = sc.parallelize(emails).toDF()\nval wordDF = emailDF.explode(\"body\", \"word\") { body: String => body.split(\" \")}\nwordDF.show(false)","user":"anonymous","dateUpdated":"2019-04-25T16:05:31+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Email\nemails: List[Email] = List(Email(James,Mary,back,just got back from vacation), Email(John,Jessica,money,make million dollars), Email(Tim,Kevin,report,send me sales report ASAP))\nemailDF: org.apache.spark.sql.DataFrame = [sender: string, recepient: string ... 2 more fields]\nwarning: there was one deprecation warning; re-run with -deprecation for details\nwordDF: org.apache.spark.sql.DataFrame = [sender: string, recepient: string ... 3 more fields]\n+------+---------+-------+---------------------------+--------+\n|sender|recepient|subject|body                       |word    |\n+------+---------+-------+---------------------------+--------+\n|James |Mary     |back   |just got back from vacation|just    |\n|James |Mary     |back   |just got back from vacation|got     |\n|James |Mary     |back   |just got back from vacation|back    |\n|James |Mary     |back   |just got back from vacation|from    |\n|James |Mary     |back   |just got back from vacation|vacation|\n|John  |Jessica  |money  |make million dollars       |make    |\n|John  |Jessica  |money  |make million dollars       |million |\n|John  |Jessica  |money  |make million dollars       |dollars |\n|Tim   |Kevin    |report |send me sales report ASAP  |send    |\n|Tim   |Kevin    |report |send me sales report ASAP  |me      |\n|Tim   |Kevin    |report |send me sales report ASAP  |sales   |\n|Tim   |Kevin    |report |send me sales report ASAP  |report  |\n|Tim   |Kevin    |report |send me sales report ASAP  |ASAP    |\n+------+---------+-------+---------------------------+--------+\n\n"}]},"apps":[],"jobName":"paragraph_1556187866671_785055199","id":"20190425-155426_1931151142","dateCreated":"2019-04-25T15:54:26+0530","dateStarted":"2019-04-25T16:05:31+0530","dateFinished":"2019-04-25T16:05:32+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:620"},{"text":"wordDF.orderBy($\"subject\".desc_nulls_first).show","user":"anonymous","dateUpdated":"2019-04-25T16:14:47+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+---------+-------+--------------------+--------+\n|sender|recepient|subject|                body|    word|\n+------+---------+-------+--------------------+--------+\n|   Tim|    Kevin| report|send me sales rep...|    send|\n|   Tim|    Kevin| report|send me sales rep...|  report|\n|   Tim|    Kevin| report|send me sales rep...|      me|\n|   Tim|    Kevin| report|send me sales rep...|    ASAP|\n|   Tim|    Kevin| report|send me sales rep...|   sales|\n|  John|  Jessica|  money|make million dollars| dollars|\n|  John|  Jessica|  money|make million dollars|    make|\n|  John|  Jessica|  money|make million dollars| million|\n| James|     Mary|   back|just got back fro...|    just|\n| James|     Mary|   back|just got back fro...|     got|\n| James|     Mary|   back|just got back fro...|    from|\n| James|     Mary|   back|just got back fro...|    back|\n| James|     Mary|   back|just got back fro...|vacation|\n+------+---------+-------+--------------------+--------+\n\n"}]},"apps":[],"jobName":"paragraph_1556188421379_996378396","id":"20190425-160341_79844404","dateCreated":"2019-04-25T16:03:41+0530","dateStarted":"2019-04-25T16:14:47+0530","dateFinished":"2019-04-25T16:14:47+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:621"},{"text":"%md\n# rollup\nThe rollup method takes the names of one or more columns as arguments and returns a multi-dimensional\nrollup. It is useful for subaggregation along a hierarchical dimension such as geography or time.\nAssume you have a dataset that tracks annual sales by city, state and country. The rollup method can\nbe used to calculate both grand total and subtotals by city, state, and country.","user":"anonymous","dateUpdated":"2019-04-25T16:15:26+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>rollup</h1>\n<p>The rollup method takes the names of one or more columns as arguments and returns a multi-dimensional<br/>rollup. It is useful for subaggregation along a hierarchical dimension such as geography or time.<br/>Assume you have a dataset that tracks annual sales by city, state and country. The rollup method can<br/>be used to calculate both grand total and subtotals by city, state, and country.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1556188976509_-1171046168","id":"20190425-161256_1854783360","dateCreated":"2019-04-25T16:12:56+0530","dateStarted":"2019-04-25T16:15:26+0530","dateFinished":"2019-04-25T16:15:26+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:622"},{"text":"case class SalesByCity(year: Int, city: String, state: String,\ncountry: String, revenue: Double)\nval salesByCity = List(SalesByCity(2014, \"Boston\", \"MA\", \"USA\", 2000),\nSalesByCity(2015, \"Boston\", \"MA\", \"USA\", 3000),\nSalesByCity(2014, \"Cambridge\", \"MA\", \"USA\", 2000),\nSalesByCity(2015, \"Cambridge\", \"MA\", \"USA\", 3000),\nSalesByCity(2014, \"Palo Alto\", \"CA\", \"USA\", 4000),\nSalesByCity(2015, \"Palo Alto\", \"CA\", \"USA\", 6000),\nSalesByCity(2014, \"Pune\", \"MH\", \"India\", 1000),\nSalesByCity(2015, \"Pune\", \"MH\", \"India\", 1000),\nSalesByCity(2015, \"Mumbai\", \"MH\", \"India\", 1000),\nSalesByCity(2014, \"Mumbai\", \"MH\", \"India\", 2000))\nval salesByCityDF = sc.parallelize(salesByCity).toDF()\nval rollup = salesByCityDF.rollup($\"country\", $\"state\", $\"city\").sum(\"revenue\")\nrollup.show","user":"anonymous","dateUpdated":"2019-04-25T18:40:52+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class SalesByCity\nsalesByCity: List[SalesByCity] = List(SalesByCity(2014,Boston,MA,USA,2000.0), SalesByCity(2015,Boston,MA,USA,3000.0), SalesByCity(2014,Cambridge,MA,USA,2000.0), SalesByCity(2015,Cambridge,MA,USA,3000.0), SalesByCity(2014,Palo Alto,CA,USA,4000.0), SalesByCity(2015,Palo Alto,CA,USA,6000.0), SalesByCity(2014,Pune,MH,India,1000.0), SalesByCity(2015,Pune,MH,India,1000.0), SalesByCity(2015,Mumbai,MH,India,1000.0), SalesByCity(2014,Mumbai,MH,India,2000.0))\nsalesByCityDF: org.apache.spark.sql.DataFrame = [year: int, city: string ... 3 more fields]\nrollup: org.apache.spark.sql.DataFrame = [country: string, state: string ... 2 more fields]\n+-------+-----+---------+------------+\n|country|state|     city|sum(revenue)|\n+-------+-----+---------+------------+\n|    USA|   MA|   Boston|      5000.0|\n|    USA|   MA|Cambridge|      5000.0|\n|  India|   MH|     Pune|      2000.0|\n|  India|   MH|     null|      5000.0|\n|  India| null|     null|      5000.0|\n|   null| null|     null|     25000.0|\n|  India|   MH|   Mumbai|      3000.0|\n|    USA|   MA|     null|     10000.0|\n|    USA| null|     null|     20000.0|\n|    USA|   CA|     null|     10000.0|\n|    USA|   CA|Palo Alto|     10000.0|\n+-------+-----+---------+------------+\n\n"}]},"apps":[],"jobName":"paragraph_1556189126577_1941729969","id":"20190425-161526_792518071","dateCreated":"2019-04-25T16:15:26+0530","dateStarted":"2019-04-25T18:40:52+0530","dateFinished":"2019-04-25T18:40:53+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:623"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556189146530_135535068","id":"20190425-161546_1975989629","dateCreated":"2019-04-25T16:15:46+0530","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:624"}],"name":"Difference between GroupBy, Rollup and Cube","id":"2E5PD4NPV","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"angular:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}